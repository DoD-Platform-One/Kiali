domain: bigbang.dev

sso:
  enabled: false

istio:
  enabled: false
  hardened:
    enabled: false
    customAuthorizationPolicies: []
    outboundTrafficPolicyMode: "REGISTRY_ONLY"
    customServiceEntries: []

  kiali:
    gateways:
      - "istio-system/main"
    hosts:
      - kiali.{{ .Values.domain }}

  # Default kiali peer authentication
  mtls:
    # STRICT = Allow only mutual TLS traffic
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT

tracing:
  enabled: true

monitoring:
  enabled: true

networkPolicies:
  enabled: false
  ingressLabels:
    app: istio-ingressgateway
    istio: ingressgateway
  # See `kubectl cluster-info` and then resolve to IP
  bundled:
    base:
      enabled: true
    conditional:
      enabled: true
    kubeApiAccess:
      enabled: true
      controlPlaneCidrs:
      - 10.0.0.0/8
      - 172.16.0.0/12
      - 192.168.0.0/16
    dynamic:
      enabled: true
      ingressGatewayPorts:
      - port: 20001
        protocol: TCP
      ssoCidrs:
      - 0.0.0.0/0
  package:
    allow-prometheus-mesh-egress:
      enabled: true
      direction: Egress
      from: kiali.kiali
      to: prometheus.monitoring
      ports:
      - port: 9090
    allow-grafana-mesh-egress:
      enabled: true
      direction: Egress
      from: kiali.kiali
      to: grafana.monitoring
      ports:
      - port: 3000
        protocol: TCP
    allow-tempo-mesh-egress:
      enabled: true
      direction: Egress
      from: kiali.kiali
      to: tempo.tempo
      ports:
      - port: 3100
        protocol: TCP
  additionalPolicies: []

bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_url: "http://kiali:20001"

waitJob:
  enabled: true
  scripts:
    image: registry1.dso.mil/ironbank/opensource/kubernetes/kubectl:v1.32.5
  permissions:
    apiGroups:
      - kiali.io
      - kiali.io/v1alpha1
    resources:
      - kiali

upstream:
  nameOverride: "kiali-operator"

  image:
    repo: registry1.dso.mil/ironbank/opensource/kiali/kiali-operator
    tag: v2.10.0
    pullPolicy: IfNotPresent
    pullSecrets:
      - private-registry

  # Deployment options for the operator pod.
  securityContext:
    #BB values for securityContext override
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
    privileged: false
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    runAsGroup: 2001
    runAsUser: 2001

  # allowAdHocKialiImage tells the operator to allow a user to be able to install a custom Kiali image as opposed
  # to the image the operator will install by default. In other words, it will allow the
  # Kiali CR spec.deployment.image_name and spec.deployment.image_version to be configured by the user.
  # You may want to disable this if you do not want users to install their own Kiali images.
  allowAdHocKialiImage: true

  # allowSecurityContextOverride tells the operator to allow a user to be able to fully override the Kiali
  # container securityContext. If this is false, certain securityContext settings must exist on the Kiali
  # container and any attempt to override them will be ignored.
  allowSecurityContextOverride: true

  # For what a Kiali CR spec can look like, see: https://kiali.io/docs/configuration/kialis.kiali.io/
  cr:
    create: true
    spec:
      server:
        port: 20001
      istio_namespace: istio-system
      auth:
        strategy: "anonymous"
      deployment:
        image_name: registry1.dso.mil/ironbank/opensource/kiali/kiali
        image_version: v2.10.0
        image_pull_secrets:
          - private-registry
        security_context:
          capabilities:
            drop:
              - ALL
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsGroup: 1001
          runAsUser: 1001

      external_services:
        # https://kiali.io/documentation/latest/runtimes-monitoring/
        prometheus:
          url: http://monitoring-monitoring-kube-prometheus.monitoring.svc.cluster.local:9090
        grafana:
          internal_url: "http://monitoring-grafana.monitoring.svc.cluster.local:80"
          url: "https://grafana.bigbang.dev"
          auth:
            username: "admin"
            password: "prom-operator"
            type: basic
        tracing:
          enabled: true
          url: "https://tracing.bigbang.dev"
          internal_url: "http://jaeger-query.jaeger.svc.cluster.local:16686"
          use_grpc: false
          whitelist_istio_system: ["istio"]